{"version":3,"file":"static/js/539.c3c3c8c8.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Content/Dialogs/Dialogs.module.css?5cdb","webpack://samurai-way/./src/components/Content/Dialogs/Dialog/Dialog.module.css?9684","components/Content/Dialogs/Dialog/Dialog.tsx","webpack://samurai-way/./src/components/Content/Dialogs/Message/Message.module.css?b6c4","components/Content/Dialogs/Message/Message.tsx","components/Content/Dialogs/addMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Content/Dialogs/DialogsContainer.tsx","components/Content/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/Content/Profile/UserCard/CardUser.module.css?b892","components/Content/Profile/UserCard/CardUser.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Dialogs_content__gDMrC\",\"chat\":\"Dialogs_chat__PEKO9\",\"messages\":\"Dialogs_messages__z12e5\",\"divider\":\"Dialogs_divider__5fgBP\",\"sendMessage\":\"Dialogs_sendMessage__SG7oE\",\"dialogs\":\"Dialogs_dialogs__esE19\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialog\":\"Dialog_dialog__ajKlA\",\"active\":\"Dialog_active__FGHHr\"};","import React from 'react';\r\nimport {CardUser} from '../../Profile/UserCard/CardUser';\r\nimport s from './Dialog.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {DialogType} from '../../../../redux/dialogsReducer';\r\n\r\ntype PropsType = Omit<DialogType, 'id'>\r\n\r\nexport function Dialog({url, name, status, path}: PropsType) {\r\n    return (\r\n        <NavLink className={s.dialog} activeClassName={s.active} to={path}>\r\n            <CardUser size={56} url={url} name={name} status={status}/>\r\n        </NavLink>\r\n    );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Message_content__UxN5w\",\"userInfo\":\"Message_userInfo__4oFlI\",\"status\":\"Message_status__uZjPW\",\"message\":\"Message_message__RZ-Ce\"};","import React from 'react';\r\nimport {Avatar} from 'antd';\r\nimport s from './Message.module.css';\r\n\r\ntype PropsType = {\r\n    url: string\r\n    text: string\r\n    status: string\r\n}\r\n\r\nexport function Message({url, text, status}: PropsType) {\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.userInfo}>\r\n                <Avatar size={48} src={url}/>\r\n                <div className={s.status}>{status}</div>\r\n            </div>\r\n            <div className={s.message}>{text}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Button, Input} from 'antd';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {makeField} from '../../../hoc/makeField';\r\nimport {required} from '../../../utils/validators';\r\n\r\nconst {TextArea} = Input\r\nconst ATextarea = makeField(TextArea);\r\nconst Textareareq = required(false)\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<{text: string}>) => {\r\n    return (\r\n        <form className={s.sendMessage} onSubmit={props.handleSubmit}>\r\n            <Field component={ATextarea}\r\n                   name={'text'}\r\n                   size={'large'}\r\n                   autoSize={{ minRows: 1, maxRows: 6 }}\r\n                   placeholder={'Write a message...'}\r\n                   hasFeedback\r\n                   validate={[Textareareq]}/>\r\n            <Button shape={'round'} size={'large'} type={'primary'} htmlType={'submit'} disabled={props.pristine}> send </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<{text: string}>({form: 'add-message'})(AddMessageForm)","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {RootStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: RootStateType): MapStateToProps => ({isAuth: state.auth.isAuth})\r\n\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStateToProps) {\r\n        const {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n","import {addMessage,DialogsPageType} from '../../../redux/dialogsReducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {RootStateType} from '../../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {ComponentType} from 'react';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsData: DialogsPageType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessage: (message: string) => void\r\n}\r\nexport type DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsData: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, {\r\n    addMessage,\r\n}), withAuthRedirect)(Dialogs)\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {Dialog} from './Dialog/Dialog';\r\nimport {Message} from './Message/Message';\r\nimport {Divider} from 'antd';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport AddMessageForm from './addMessageForm';\r\n\r\n\r\nexport function Dialogs({addMessage, dialogsData}: DialogsPropsType) {\r\n\r\n    const submitMessage = (values: {text: string}) => {\r\n        addMessage(values.text)\r\n    }\r\n\r\n    const mappedDialogs = dialogsData.dialogs.map(el => <Dialog key={el.id} name={el.name} url={el.url}\r\n                                                                status={el.status} path={el.path}/>);\r\n    const mappedMessages = dialogsData.messages.map(el => <Message key={el.id} url={el.url} text={el.text}\r\n                                                                   status={el.status}/>);\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.chat}>\r\n                <div className={s.messages}>\r\n                    {mappedMessages}\r\n                </div>\r\n\r\n                <Divider className={s.divider}/>\r\n                <AddMessageForm onSubmit={submitMessage}/>\r\n\r\n            </div>\r\n\r\n            <div className={s.dialogs}>\r\n                {mappedDialogs}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"cardUser\":\"CardUser_cardUser__OnM35\",\"info\":\"CardUser_info__Gza+s\",\"name\":\"CardUser_name__RIwy2\",\"status\":\"CardUser_status__YjUi6\"};","import React from 'react';\r\nimport {Avatar} from 'antd';\r\nimport s from './CardUser.module.css';\r\n\r\ntype PropsType = {\r\n    size: number\r\n    url: string\r\n    name: string\r\n    status: string\r\n}\r\n\r\nexport function CardUser({size, url, name, status}: PropsType) {\r\n    return (\r\n        <div className={s.cardUser}>\r\n            <Avatar size={size} src={url}/>\r\n            <div className={s.info}>\r\n                <div className={s.name}>\r\n                    {name}\r\n                </div>\r\n                <div className={s.status}>\r\n                    {status}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n"],"names":["Dialog","url","name","status","path","className","s","activeClassName","to","CardUser","size","Message","text","src","TextArea","Input","ATextarea","makeField","Textareareq","required","reduxForm","form","props","onSubmit","handleSubmit","Field","component","autoSize","minRows","maxRows","placeholder","hasFeedback","validate","shape","type","htmlType","disabled","pristine","mapStateToProps","state","isAuth","auth","compose","connect","dialogsData","dialogsPage","addMessage","Component","restProps","mappedDialogs","dialogs","map","el","id","mappedMessages","messages","values"],"sourceRoot":""}